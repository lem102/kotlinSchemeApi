* Lexical Analysis

#+begin_src emacs-lisp
  (jacob-web-request-helper "POST"
                            "http://localhost:8080/lexer"
                            '(("content-type" . "application/json; charset=utf-8"))
                            (json-encode '(("sourceCode" . "\"apple\"2.222"))))
#+end_src

#+RESULTS:
#+begin_example
HTTP/1.1 200 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Wed, 01 Jun 2022 12:37:34 GMT
Keep-Alive: timeout=60
Connection: keep-alive

[
    {
        "endIndex": {
            "column": 7,
            "row": 1
        },
        "startIndex": {
            "column": 0,
            "row": 1
        },
        "value": "\"apple\"",
        "type": "STRING"
    },
    {
        "endIndex": {
            "column": 12,
            "row": 1
        },
        "startIndex": {
            "column": 7,
            "row": 1
        },
        "value": "2.222",
        "type": "NUMBER"
    }
]
#+end_example

* Parsing

#+begin_src emacs-lisp
  (jacob-web-request-helper "POST"
                            "http://localhost:8080/parser"
                            '(("content-type" . "application/json; charset=utf-8"))
                            (json-encode '(("sourceCode" .
                                            "(1 2 3 test(4 7 8 (9 \"apple\" 0))) 5 6 "
                                            ))))
#+end_src

#+RESULTS:
#+begin_example
HTTP/1.1 200 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 02 Jun 2022 06:57:03 GMT
Keep-Alive: timeout=60
Connection: keep-alive

[
    {
        "expressions": [
            {
                "value": 1.0
            },
            {
                "value": 2.0
            },
            {
                "value": 3.0
            },
            {
                "identifier": "test"
            },
            {
                "expressions": [
                    {
                        "value": 4.0
                    },
                    {
                        "value": 7.0
                    },
                    {
                        "value": 8.0
                    },
                    {
                        "expressions": [
                            {
                                "value": 9.0
                            },
                            {
                                "value": "apple"
                            },
                            {
                                "value": 0.0
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "value": 5.0
    },
    {
        "value": 6.0
    }
]
#+end_example
